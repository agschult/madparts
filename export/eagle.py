# (c) 2013 Joost Yervante Damad <joost@damad.be>
# License: GPL

from xml.sax.saxutils import escape

from bs4 import BeautifulSoup

from jydutil import *

class Export:

  def __init__(self):
    self.soup = None

  def rect(self, f, shape):
    x = fget(shape, 'x')
    y = fget(shape, 'y')
    dx = fget(shape, 'dx')
    dy = fget(shape, 'dy')
    ro = fget(shape, 'ro')
    rot = fget(shape, 'rot')
    name = shape['name']
    f.write("""\
<smd name="%s" x="%f" y="%f" dx="%f" dy="%f" layer="1" roundness="%d" rot="R%d"/>
""" % (name, x, y, dx, dy, ro, rot))

  def label(self, f, shape):
    x = fget(shape,'x')
    y = fget(shape,'y')
    dy = fget(shape,'dy', 1)
    y = y - dy/2
    s = shape['value']
    x = x - len(s)*dy/2
    layer = 21
    if s == "NAME": 
      s = ">NAME"
      layer = 25
    if s == "VALUE": 
      s = ">VALUE"
      layer = 27
    f.write("""\
<text x="%f" y="%f" size="%f" layer="%d">%s</text>
""" % (x, y, dy, layer, escape(s)))
  
  def circle(self, f, shape):
    # <circle x="-2.7432" y="2.7432" radius="0.3592" width="0.1524" layer="21"/>
    r = fget(shape, 'dx') / 2
    r = fget(shape, 'r', r)
    rx = fget(shape, 'rx', r)
    dy = fget(shape, 'dy') / 2
    if dy > 0:
      ry = fget(shape, 'ry', dy)
    else:
      ry = fget(shape, 'ry', r)
    x = fget(shape,'x')
    y = fget(shape,'y')
    w = 0.25
    f.write("""\
<circle x="%f" y="%f" radius="%f" width="%f" layer="21"/>
""" % (x, y, (r - w/2), w))

  def line(self, f, shape):
    # <wire x1="-3.15" y1="3.505" x2="-3.505" y2="3.15" width="0.1524" layer="21"/>
    x1 = fget(shape, 'x1')
    y1 = fget(shape, 'y1')
    x2 = fget(shape, 'x2')
    y2 = fget(shape, 'y2')
    w = fget(shape, 'w')
    f.write("""\
<wire x1="%f" y1="%f" x2="%f" y2="%f" width="%f" layer="21"/>
""" % (x1, y1, x2, y2, w))
    pass

  def load(self, fn):
    with open(fn) as f:
      self.soup = BeautifulSoup(f, "xml")
  
  # warning, broken!
  def generate(self, shapes):
    for shape in shapes:
      if shape['type'] == 'meta':
        name = eget(shape, 'name', 'Name not found')
        idx = eget(shape, 'id', 'Id not found')
        desc = oget(shape, 'desc', None)
        parent_idx = oget(shape, 'parent', None)
        break
    with open('madparts.lbr', 'w') as f:
      f.write(head)
      f.write("<package name=\"%s\">\n" % (name))
      f.write("<description>\n")
      if desc != None:
        f.write("%s\n" % (escape(desc)))
        f.write(escape("<br/><br/>\n"));
      f.write(escape("Generated by 'madparts'.<br/>\n"))
      f.write("Id: %s" % (escape(idx)))
      if parent_idx != None:
        f.write(" parent: %s" % (escape(parent_idx)))
      f.write("</description>\n")
      for shape in shapes:
        if 'shape' in shape:
          if shape['shape'] == 'rect': self.rect(f, shape)
          if shape['shape'] == 'circle': self.circle(f, shape)
          if shape['shape'] == 'line': self.line(f, shape)
        elif shape['type'] == 'label':
          self.label(f, shape)
      f.write("</package>\n");
      f.write(tail)

  def check(self, fn):
    self.load(fn)
    if self.soup.eagle == None:
      raise Exception("Unknown file format")
    v = self.soup.eagle.get('version')
    if v == None:
      raise Exception("Unknown file format (no eagle XML?)")
    if float(v) < 6:
      raise Exception("Eagle 6.0 or later is required.")
    return "Eagle CAD %s library" % (v)

  def export(self, fn, shapes):
    self.load(fn)
    print "TODO: actual export :)"
